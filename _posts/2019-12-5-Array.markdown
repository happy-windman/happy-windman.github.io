---
layout: post
title:  "字符串与数组操作方法整理（2）"
date:   2019-12-05 14:05:21 +0800
tags:  Html,Javascript
color: rgb(255,90,90)
cover: '../assets/test.png'
subtitle: '数组'
---

###数组：

push在数组后面加新的子项
Pop 删除数组的最后一项
Unshift在数组的起始位置加新的子项
shift删除数组的起始一项

sort()   按升序排列数组项——即最小的值位于最前面，最大的值排在最后面
在排序时，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串，

reverse()：反转数组项的顺序

splice()：很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。
删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。
插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。
替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。



上面这6个属性都是直接修改原始的数。
      
concat()：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。

slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。

indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。
lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找

includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。


map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。
filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。
every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true
some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true

数组去重：
   1. Set 对象允许你存储任何类型的 唯一值 ，无论是原始值或者是对象引用。 
   Set对象是值的集合，你可以按照插入的顺序迭代它的元素。
   Set中的元素只会出现一次，即 Set 中的元素是唯一的。
            Array from（new Set（arr））
   （2）indexOf方法： 
      
```javascript
            function repetition(arr){
               var result = [];
               for(var i=0;i<arr.length;i++){
                  if(result.indexOf(arr[i]) == -1){
                        result.push(arr[i]);
                  }
               }
               return result;
               console.log(result);
            }
```
   
（3）every方法：
```javascript
		function repetition(arr){
		  var result = [];
		    for(var i=0;i<arr.length;i++){
		        var isBool = result.every(function(val){
		            return arr[i] != val;
		        });
		        if(isBool){
		            result.push(arr[i]);
		        }
		    }
		     return result;
		    console.log( result );
		}
```


